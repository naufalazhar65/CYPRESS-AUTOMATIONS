{
  "stats": {
    "suites": 3,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-19T12:36:26.683Z",
    "end": "2023-11-19T12:36:31.308Z",
    "duration": 4625,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6fdc3629-004a-4538-8113-40ca895b8bfd",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should logout the user",
          "fullTitle": "should logout the user",
          "timedOut": null,
          "duration": 1384,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Assuming you have a user already logged in, and you have the necessary authentication tokens\n// Perform the login before attempting to logout\n// Your login code goes here...\n// Now, call the custom Cypress command to logout the user\ncy.logoutUser();",
          "err": {},
          "uuid": "761ca2ff-45ff-46d6-ad07-a72861df8288",
          "parentUUID": "6fdc3629-004a-4538-8113-40ca895b8bfd",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "290f7b61-83e2-4610-9164-335456ec7c8c",
          "title": "Petstore API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of pets",
              "fullTitle": "Petstore API Testing should retrieve a list of pets",
              "timedOut": null,
              "duration": 290,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', 'https://petstore.swagger.io/v2/pet/findByStatus?status=available').then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array').and.not.be.empty;\n  cy.log('List of Available Pets:', response.body);\n});",
              "err": {},
              "uuid": "1ebc3c7d-a221-4cf3-8ec7-3b8e7478d511",
              "parentUUID": "290f7b61-83e2-4610-9164-335456ec7c8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new pet",
              "fullTitle": "Petstore API Testing should add a new pet",
              "timedOut": null,
              "duration": 286,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPet = {\n  id: 12345,\n  name: 'CypressPet',\n  category: {\n    id: 1,\n    name: 'Dogs'\n  },\n  photoUrls: ['https://example.com/pet.jpg'],\n  tags: [{\n    id: 1,\n    name: 'tag1'\n  }],\n  status: 'available'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/pet',\n  body: newPet\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newPet.id);\n  expect(response.body.name).to.eq(newPet.name);\n  cy.log('New Pet Added:', response.body);\n});",
              "err": {},
              "uuid": "fa9cbcc6-826d-4120-bf63-7b7d254affea",
              "parentUUID": "290f7b61-83e2-4610-9164-335456ec7c8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a pet's information",
              "fullTitle": "Petstore API Testing should update a pet's information",
              "timedOut": null,
              "duration": 283,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petIdToUpdate = 12345;\nconst updatedPetInfo = {\n  id: petIdToUpdate,\n  name: 'UpdatedCypressPet',\n  status: 'sold'\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/pet`,\n  body: updatedPetInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(updatedPetInfo.id);\n  expect(response.body.name).to.eq(updatedPetInfo.name);\n  expect(response.body.status).to.eq(updatedPetInfo.status);\n  cy.log('Pet Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "8ba92e56-839a-41ba-b2a0-151fe8785f3e",
              "parentUUID": "290f7b61-83e2-4610-9164-335456ec7c8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet",
              "fullTitle": "Petstore API Testing should delete a pet",
              "timedOut": null,
              "duration": 280,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petIdToDelete = 12345;\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/pet/${petIdToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`Pet with ID ${petIdToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "e25d0012-5e37-45e6-ac58-c06c94cc12c6",
              "parentUUID": "290f7b61-83e2-4610-9164-335456ec7c8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1ebc3c7d-a221-4cf3-8ec7-3b8e7478d511",
            "fa9cbcc6-826d-4120-bf63-7b7d254affea",
            "8ba92e56-839a-41ba-b2a0-151fe8785f3e",
            "e25d0012-5e37-45e6-ac58-c06c94cc12c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1139,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "41e9cf2d-88fa-4adc-ba99-b138016bebba",
          "title": "Petstore Store API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should place a new order",
              "fullTitle": "Petstore Store API Testing should place a new order",
              "timedOut": null,
              "duration": 284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newOrder = {\n  id: 1,\n  petId: 12345,\n  // Assuming pet with ID 12345 exists\n  quantity: 1,\n  shipDate: '2023-12-01T12:00:00.000Z',\n  status: 'placed',\n  complete: true\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/store/order',\n  body: newOrder\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newOrder.id);\n  expect(response.body.petId).to.eq(newOrder.petId);\n  expect(response.body.quantity).to.eq(newOrder.quantity);\n  expect(response.body.status).to.eq(newOrder.status);\n  expect(response.body.complete).to.eq(newOrder.complete);\n  cy.log('New Order Placed:', response.body);\n});",
              "err": {},
              "uuid": "1b50845a-42a8-4c92-9439-acc719047cd9",
              "parentUUID": "41e9cf2d-88fa-4adc-ba99-b138016bebba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve an order by ID",
              "fullTitle": "Petstore Store API Testing should retrieve an order by ID",
              "timedOut": null,
              "duration": 280,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderIdToRetrieve = 1;\ncy.request('GET', `https://petstore.swagger.io/v2/store/order/${orderIdToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(orderIdToRetrieve);\n  cy.log('Retrieved Order:', response.body);\n});",
              "err": {},
              "uuid": "4429dbdc-ba00-4c13-9afe-19003110a8b9",
              "parentUUID": "41e9cf2d-88fa-4adc-ba99-b138016bebba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an order by ID",
              "fullTitle": "Petstore Store API Testing should delete an order by ID",
              "timedOut": null,
              "duration": 284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderIdToDelete = 1;\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/store/order/${orderIdToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`Order with ID ${orderIdToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "69d32ce4-14b3-42e1-84ac-31b8dedd79bb",
              "parentUUID": "41e9cf2d-88fa-4adc-ba99-b138016bebba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b50845a-42a8-4c92-9439-acc719047cd9",
            "4429dbdc-ba00-4c13-9afe-19003110a8b9",
            "69d32ce4-14b3-42e1-84ac-31b8dedd79bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 848,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a4a52e49-7016-4f6f-aed2-dd8310068031",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 282,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 11,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 1\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response:', response);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  // expect(response.body.id).to.eq(newUser.id);\n  // expect(response.body.username).to.eq(newUser.username);\n  // expect(response.body.firstName).to.eq(newUser.firstName);\n  // expect(response.body.lastName).to.eq(newUser.lastName);\n  // expect(response.body.email).to.eq(newUser.email);\n  // expect(response.body.password).to.eq(newUser.password);\n  // expect(response.body.phone).to.eq(newUser.phone);\n  // expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {},
              "uuid": "916f91e0-43df-4235-9652-39363d50aa76",
              "parentUUID": "a4a52e49-7016-4f6f-aed2-dd8310068031",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 279,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "992e8bff-6ff3-4243-8902-81da51762552",
              "parentUUID": "a4a52e49-7016-4f6f-aed2-dd8310068031",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "971e9431-7cf0-4220-82e3-abd5e8048d9c",
              "parentUUID": "a4a52e49-7016-4f6f-aed2-dd8310068031",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 278,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "fffc8088-3b27-447f-9410-2853f8aaa240",
              "parentUUID": "a4a52e49-7016-4f6f-aed2-dd8310068031",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "916f91e0-43df-4235-9652-39363d50aa76",
            "992e8bff-6ff3-4243-8902-81da51762552",
            "971e9431-7cf0-4220-82e3-abd5e8048d9c",
            "fffc8088-3b27-447f-9410-2853f8aaa240"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "761ca2ff-45ff-46d6-ad07-a72861df8288"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1384,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/reports/mocha"
      },
      "version": "6.2.0"
    }
  }
}