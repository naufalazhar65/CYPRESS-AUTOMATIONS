{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 5,
    "pending": 0,
    "failures": 1,
    "start": "2023-11-19T16:36:53.481Z",
    "end": "2023-11-19T16:36:56.820Z",
    "duration": 3339,
    "testsRegistered": 6,
    "passPercent": 83.33333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b8cadf03-dd69-4ff2-bfa3-7e1a10644640",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should add a new pet",
          "fullTitle": "should add a new pet",
          "timedOut": null,
          "duration": 1637,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const newPet = {\n  id: 12345,\n  name: 'CypressPet',\n  category: {\n    id: 1,\n    name: 'Dogs'\n  },\n  photoUrls: ['https://example.com/pet.jpg'],\n  tags: [{\n    id: 1,\n    name: 'tag1'\n  }],\n  status: 'available'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/pet',\n  body: newPet\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newPet.id);\n  expect(response.body.name).to.eq(newPet.name);\n  cy.log('New Pet Added:', response.body);\n});",
          "err": {},
          "uuid": "101c9b90-f289-4af3-a72f-cec80b74b136",
          "parentUUID": "b8cadf03-dd69-4ff2-bfa3-7e1a10644640",
          "isHook": false,
          "skipped": false
        },
        {
          "title": "should logout the user",
          "fullTitle": "should logout the user",
          "timedOut": null,
          "duration": 315,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Assuming you have a user already logged in, and you have the necessary authentication tokens\n// Perform the login before attempting to logout\n// Your login code goes here...\n// Now, call the custom Cypress command to logout the user\ncy.logoutUser();",
          "err": {},
          "uuid": "40796253-b5c4-4825-a293-3350184f7c79",
          "parentUUID": "b8cadf03-dd69-4ff2-bfa3-7e1a10644640",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "e76fe1a0-d36e-4cd2-b0cb-594696c4f2c5",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 396,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 123455,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 34534\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response Body:', response.body);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  expect(response.body.id).to.eq(newUser.id);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 123455",
                "estack": "AssertionError: expected undefined to equal 123455\n    at Context.eval (webpack://cypress_test/./cypress/e2e/4-api_testing/pet_store.cy.js:180:34)",
                "diff": null
              },
              "uuid": "2e965e36-f417-4994-be8b-047e48d3766c",
              "parentUUID": "e76fe1a0-d36e-4cd2-b0cb-594696c4f2c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 319,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "c6139f27-c6a3-4ec8-a9f2-8ad1e67617b5",
              "parentUUID": "e76fe1a0-d36e-4cd2-b0cb-594696c4f2c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 282,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "94a4008f-3b0d-4ebb-bf5f-fa13344a4753",
              "parentUUID": "e76fe1a0-d36e-4cd2-b0cb-594696c4f2c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 309,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "7d6b3f51-4fff-47c1-bb38-9fe34477a7f6",
              "parentUUID": "e76fe1a0-d36e-4cd2-b0cb-594696c4f2c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c6139f27-c6a3-4ec8-a9f2-8ad1e67617b5",
            "94a4008f-3b0d-4ebb-bf5f-fa13344a4753",
            "7d6b3f51-4fff-47c1-bb38-9fe34477a7f6"
          ],
          "failures": [
            "2e965e36-f417-4994-be8b-047e48d3766c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1306,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "101c9b90-f289-4af3-a72f-cec80b74b136",
        "40796253-b5c4-4825-a293-3350184f7c79"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1952,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/reports/mocha"
      },
      "version": "6.2.0"
    }
  }
}