{
  "stats": {
    "suites": 3,
    "tests": 11,
    "passes": 9,
    "pending": 0,
    "failures": 2,
    "start": "2023-11-19T17:16:19.049Z",
    "end": "2023-11-19T17:16:24.402Z",
    "duration": 5353,
    "testsRegistered": 11,
    "passPercent": 81.81818181818183,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c4bac1f5-d5ac-4e22-b976-e9ae7da921ff",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8d36a069-9f51-4afd-aee1-e912a8161bc0",
          "title": "Petstore API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of pets",
              "fullTitle": "Petstore API Testing should retrieve a list of pets",
              "timedOut": null,
              "duration": 1971,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', 'https://petstore.swagger.io/v2/pet/findByStatus?status=available').then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array').and.not.be.empty;\n  cy.log('List of Available Pets:', response.body);\n});",
              "err": {},
              "uuid": "95e1c82b-6ce9-4401-85b0-05b62f0cf85d",
              "parentUUID": "8d36a069-9f51-4afd-aee1-e912a8161bc0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new pet",
              "fullTitle": "Petstore API Testing should add a new pet",
              "timedOut": null,
              "duration": 291,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPet = {\n  id: 12345,\n  name: 'CypressPet',\n  category: {\n    id: 1,\n    name: 'Dogs'\n  },\n  photoUrls: ['https://example.com/pet.jpg'],\n  tags: [{\n    id: 1,\n    name: 'tag1'\n  }],\n  status: 'available'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/pet',\n  body: newPet\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newPet.id);\n  expect(response.body.name).to.eq(newPet.name);\n  cy.log('New Pet Added:', response.body);\n});",
              "err": {},
              "uuid": "f86ae62c-e300-4bf0-9c0f-c1063fcb872e",
              "parentUUID": "8d36a069-9f51-4afd-aee1-e912a8161bc0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a pet's information",
              "fullTitle": "Petstore API Testing should update a pet's information",
              "timedOut": null,
              "duration": 276,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petIdToUpdate = 12345;\nconst updatedPetInfo = {\n  id: petIdToUpdate,\n  name: 'UpdatedCypressPet',\n  status: 'sold'\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/pet`,\n  body: updatedPetInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(updatedPetInfo.id);\n  expect(response.body.name).to.eq(updatedPetInfo.name);\n  expect(response.body.status).to.eq(updatedPetInfo.status);\n  cy.log('Pet Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "a60fcb48-3dd5-40e2-a700-34859a7b49e0",
              "parentUUID": "8d36a069-9f51-4afd-aee1-e912a8161bc0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet",
              "fullTitle": "Petstore API Testing should delete a pet",
              "timedOut": null,
              "duration": 276,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petIdToDelete = 12345;\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/pet/${petIdToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`Pet with ID ${petIdToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "a4851322-a9a2-4582-86db-0d21c20a23e8",
              "parentUUID": "8d36a069-9f51-4afd-aee1-e912a8161bc0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "95e1c82b-6ce9-4401-85b0-05b62f0cf85d",
            "f86ae62c-e300-4bf0-9c0f-c1063fcb872e",
            "a60fcb48-3dd5-40e2-a700-34859a7b49e0",
            "a4851322-a9a2-4582-86db-0d21c20a23e8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2814,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "70134d11-1ceb-4fc6-a9c6-965e76a1112e",
          "title": "Petstore Store API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should place a new order",
              "fullTitle": "Petstore Store API Testing should place a new order",
              "timedOut": null,
              "duration": 318,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newOrder = {\n  id: 10,\n  petId: 12345,\n  // Assuming pet with ID 12345 exists\n  quantity: 1,\n  shipDate: '2023-12-01T12:00:00.000Z',\n  status: 'placed',\n  complete: true\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/store/order',\n  body: newOrder\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newOrder.id);\n  expect(response.body.petId).to.eq(newOrder.petId);\n  expect(response.body.quantity).to.eq(newOrder.quantity);\n  expect(response.body.status).to.eq(newOrder.status);\n  expect(response.body.complete).to.eq(newOrder.complete);\n  cy.log('New Order Placed:', response.body);\n});",
              "err": {},
              "uuid": "7f6e3759-911f-46e5-8ef9-1b5803abdd85",
              "parentUUID": "70134d11-1ceb-4fc6-a9c6-965e76a1112e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve an order by ID",
              "fullTitle": "Petstore Store API Testing should retrieve an order by ID",
              "timedOut": null,
              "duration": 295,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderIdToRetrieve = 10;\ncy.request('GET', `https://petstore.swagger.io/v2/store/order/${orderIdToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(orderIdToRetrieve);\n  cy.log('Retrieved Order:', response.body);\n});",
              "err": {},
              "uuid": "e4a9928e-db53-40b1-a984-b497a5e631f4",
              "parentUUID": "70134d11-1ceb-4fc6-a9c6-965e76a1112e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an order by ID",
              "fullTitle": "Petstore Store API Testing should delete an order by ID",
              "timedOut": null,
              "duration": 271,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderIdToDelete = 10;\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/store/order/${orderIdToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`Order with ID ${orderIdToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "68f4e936-4d18-410e-b440-61ade2e0df62",
              "parentUUID": "70134d11-1ceb-4fc6-a9c6-965e76a1112e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7f6e3759-911f-46e5-8ef9-1b5803abdd85",
            "e4a9928e-db53-40b1-a984-b497a5e631f4",
            "68f4e936-4d18-410e-b440-61ade2e0df62"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 884,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bb4b00aa-885c-43b0-8d4c-10b9c66d5d11",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 471,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 123455,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 34534\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response Body:', response.body);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  expect(response.body.id).to.eq(newUser.id);\n  expect(response.body.username).to.eq(newUser.username);\n  expect(response.body.firstName).to.eq(newUser.firstName);\n  expect(response.body.lastName).to.eq(newUser.lastName);\n  expect(response.body.email).to.eq(newUser.email);\n  expect(response.body.password).to.eq(newUser.password);\n  expect(response.body.phone).to.eq(newUser.phone);\n  expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 123455",
                "estack": "AssertionError: expected undefined to equal 123455\n    at Context.eval (webpack://cypress_test/./cypress/e2e/4-api_testing/pet_store.cy.js:180:34)",
                "diff": null
              },
              "uuid": "4ad03b4c-3f89-4969-9384-4cb6e32fa260",
              "parentUUID": "bb4b00aa-885c-43b0-8d4c-10b9c66d5d11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 289,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "88c2cd1a-f7ef-49ff-a61e-55943d88adb3",
              "parentUUID": "bb4b00aa-885c-43b0-8d4c-10b9c66d5d11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 446,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(updatedUserInfo.id);\n  expect(response.body.username).to.eq(updatedUserInfo.username);\n  expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  expect(response.body.email).to.eq(updatedUserInfo.email);\n  expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 11",
                "estack": "AssertionError: expected undefined to equal 11\n    at Context.eval (webpack://cypress_test/./cypress/e2e/4-api_testing/pet_store.cy.js:228:36)",
                "diff": null
              },
              "uuid": "ec95f062-d66c-4b63-b98c-a85bf88bde6f",
              "parentUUID": "bb4b00aa-885c-43b0-8d4c-10b9c66d5d11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 303,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "bf1ed120-7941-4cee-a68b-6938593d0b08",
              "parentUUID": "bb4b00aa-885c-43b0-8d4c-10b9c66d5d11",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "88c2cd1a-f7ef-49ff-a61e-55943d88adb3",
            "bf1ed120-7941-4cee-a68b-6938593d0b08"
          ],
          "failures": [
            "4ad03b4c-3f89-4969-9384-4cb6e32fa260",
            "ec95f062-d66c-4b63-b98c-a85bf88bde6f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1509,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/reports/mocha"
      },
      "version": "6.2.0"
    }
  }
}