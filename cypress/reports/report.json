{
  "stats": {
    "suites": 9,
    "tests": 65,
    "passes": 59,
    "pending": 0,
    "failures": 6,
    "testsRegistered": 65,
    "passPercent": 90.76923076923077,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-11-19T12:32:14.107Z",
    "end": "2023-11-19T16:27:28.908Z",
    "duration": 14114801
  },
  "results": [
    {
      "uuid": "521def0b-192b-4ec4-a9aa-2c6a11a5f2e4",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5a10674c-b1b2-482f-8f03-bac993901f0d",
          "title": "Petstore API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of pets",
              "fullTitle": "Petstore API Testing should retrieve a list of pets",
              "timedOut": null,
              "duration": 2152,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', 'https://petstore.swagger.io/v2/pet/findByStatus?status=available').then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array').and.not.be.empty;\n  cy.log('List of Available Pets:', response.body);\n});",
              "err": {},
              "uuid": "2a3a3adf-8607-4788-a776-862c2f1555c1",
              "parentUUID": "5a10674c-b1b2-482f-8f03-bac993901f0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new pet",
              "fullTitle": "Petstore API Testing should add a new pet",
              "timedOut": null,
              "duration": 305,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPet = {\n  id: 12345,\n  name: 'CypressPet',\n  category: {\n    id: 1,\n    name: 'Dogs'\n  },\n  photoUrls: ['https://example.com/pet.jpg'],\n  tags: [{\n    id: 1,\n    name: 'tag1'\n  }],\n  status: 'available'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/pet',\n  body: newPet\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newPet.id);\n  expect(response.body.name).to.eq(newPet.name);\n  cy.log('New Pet Added:', response.body);\n});",
              "err": {},
              "uuid": "33db67ec-b663-4220-b210-86aef9961267",
              "parentUUID": "5a10674c-b1b2-482f-8f03-bac993901f0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a pet's information",
              "fullTitle": "Petstore API Testing should update a pet's information",
              "timedOut": null,
              "duration": 292,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petIdToUpdate = 12345;\nconst updatedPetInfo = {\n  id: petIdToUpdate,\n  name: 'UpdatedCypressPet',\n  status: 'sold'\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/pet`,\n  body: updatedPetInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(updatedPetInfo.id);\n  expect(response.body.name).to.eq(updatedPetInfo.name);\n  expect(response.body.status).to.eq(updatedPetInfo.status);\n  cy.log('Pet Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "a4616a29-921e-4d69-827f-5a3822475487",
              "parentUUID": "5a10674c-b1b2-482f-8f03-bac993901f0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet",
              "fullTitle": "Petstore API Testing should delete a pet",
              "timedOut": null,
              "duration": 286,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petIdToDelete = 12345;\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/pet/${petIdToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`Pet with ID ${petIdToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "f45eb67a-1a09-426d-ab92-d7908b38e22f",
              "parentUUID": "5a10674c-b1b2-482f-8f03-bac993901f0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2a3a3adf-8607-4788-a776-862c2f1555c1",
            "33db67ec-b663-4220-b210-86aef9961267",
            "a4616a29-921e-4d69-827f-5a3822475487",
            "f45eb67a-1a09-426d-ab92-d7908b38e22f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3035,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6db54e46-d35c-4028-a83c-4a75c9324bab",
          "title": "Petstore Store API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should place a new order",
              "fullTitle": "Petstore Store API Testing should place a new order",
              "timedOut": null,
              "duration": 292,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newOrder = {\n  id: 1,\n  petId: 12345,\n  // Assuming pet with ID 12345 exists\n  quantity: 1,\n  shipDate: '2023-12-01T12:00:00.000Z',\n  status: 'placed',\n  complete: true\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/store/order',\n  body: newOrder\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newOrder.id);\n  expect(response.body.petId).to.eq(newOrder.petId);\n  expect(response.body.quantity).to.eq(newOrder.quantity);\n  expect(response.body.status).to.eq(newOrder.status);\n  expect(response.body.complete).to.eq(newOrder.complete);\n  cy.log('New Order Placed:', response.body);\n});",
              "err": {},
              "uuid": "e34a58da-4f4e-47f1-bb9f-a6238b175f44",
              "parentUUID": "6db54e46-d35c-4028-a83c-4a75c9324bab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve an order by ID",
              "fullTitle": "Petstore Store API Testing should retrieve an order by ID",
              "timedOut": null,
              "duration": 287,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderIdToRetrieve = 1;\ncy.request('GET', `https://petstore.swagger.io/v2/store/order/${orderIdToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(orderIdToRetrieve);\n  cy.log('Retrieved Order:', response.body);\n});",
              "err": {},
              "uuid": "49688983-777d-41f6-8efe-0e0b3184c6c4",
              "parentUUID": "6db54e46-d35c-4028-a83c-4a75c9324bab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an order by ID",
              "fullTitle": "Petstore Store API Testing should delete an order by ID",
              "timedOut": null,
              "duration": 288,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderIdToDelete = 1;\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/store/order/${orderIdToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`Order with ID ${orderIdToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "305ba672-116f-41f3-ba36-21d39f16b408",
              "parentUUID": "6db54e46-d35c-4028-a83c-4a75c9324bab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e34a58da-4f4e-47f1-bb9f-a6238b175f44",
            "49688983-777d-41f6-8efe-0e0b3184c6c4",
            "305ba672-116f-41f3-ba36-21d39f16b408"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 867,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3bbfe796-b537-4261-96ad-e16c64a600ac",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 290,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 11,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 1\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response:', response);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  // expect(response.body.id).to.eq(newUser.id);\n  // expect(response.body.username).to.eq(newUser.username);\n  // expect(response.body.firstName).to.eq(newUser.firstName);\n  // expect(response.body.lastName).to.eq(newUser.lastName);\n  // expect(response.body.email).to.eq(newUser.email);\n  // expect(response.body.password).to.eq(newUser.password);\n  // expect(response.body.phone).to.eq(newUser.phone);\n  // expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {},
              "uuid": "3930fc97-8e6e-4a55-8980-6db9fb867ff2",
              "parentUUID": "3bbfe796-b537-4261-96ad-e16c64a600ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 287,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "dc196c34-b79c-4378-bf58-133c9564d2f2",
              "parentUUID": "3bbfe796-b537-4261-96ad-e16c64a600ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 287,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "0fd79e90-d0e4-437c-b9ab-b0270cc6a342",
              "parentUUID": "3bbfe796-b537-4261-96ad-e16c64a600ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 295,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "5c3f82f9-2de3-42a6-b8e7-2bc0cd02df6d",
              "parentUUID": "3bbfe796-b537-4261-96ad-e16c64a600ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3930fc97-8e6e-4a55-8980-6db9fb867ff2",
            "dc196c34-b79c-4378-bf58-133c9564d2f2",
            "0fd79e90-d0e4-437c-b9ab-b0270cc6a342",
            "5c3f82f9-2de3-42a6-b8e7-2bc0cd02df6d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1159,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6fdc3629-004a-4538-8113-40ca895b8bfd",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should logout the user",
          "fullTitle": "should logout the user",
          "timedOut": null,
          "duration": 1384,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Assuming you have a user already logged in, and you have the necessary authentication tokens\n// Perform the login before attempting to logout\n// Your login code goes here...\n// Now, call the custom Cypress command to logout the user\ncy.logoutUser();",
          "err": {},
          "uuid": "761ca2ff-45ff-46d6-ad07-a72861df8288",
          "parentUUID": "6fdc3629-004a-4538-8113-40ca895b8bfd",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "290f7b61-83e2-4610-9164-335456ec7c8c",
          "title": "Petstore API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of pets",
              "fullTitle": "Petstore API Testing should retrieve a list of pets",
              "timedOut": null,
              "duration": 290,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', 'https://petstore.swagger.io/v2/pet/findByStatus?status=available').then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array').and.not.be.empty;\n  cy.log('List of Available Pets:', response.body);\n});",
              "err": {},
              "uuid": "1ebc3c7d-a221-4cf3-8ec7-3b8e7478d511",
              "parentUUID": "290f7b61-83e2-4610-9164-335456ec7c8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new pet",
              "fullTitle": "Petstore API Testing should add a new pet",
              "timedOut": null,
              "duration": 286,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPet = {\n  id: 12345,\n  name: 'CypressPet',\n  category: {\n    id: 1,\n    name: 'Dogs'\n  },\n  photoUrls: ['https://example.com/pet.jpg'],\n  tags: [{\n    id: 1,\n    name: 'tag1'\n  }],\n  status: 'available'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/pet',\n  body: newPet\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newPet.id);\n  expect(response.body.name).to.eq(newPet.name);\n  cy.log('New Pet Added:', response.body);\n});",
              "err": {},
              "uuid": "fa9cbcc6-826d-4120-bf63-7b7d254affea",
              "parentUUID": "290f7b61-83e2-4610-9164-335456ec7c8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a pet's information",
              "fullTitle": "Petstore API Testing should update a pet's information",
              "timedOut": null,
              "duration": 283,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petIdToUpdate = 12345;\nconst updatedPetInfo = {\n  id: petIdToUpdate,\n  name: 'UpdatedCypressPet',\n  status: 'sold'\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/pet`,\n  body: updatedPetInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(updatedPetInfo.id);\n  expect(response.body.name).to.eq(updatedPetInfo.name);\n  expect(response.body.status).to.eq(updatedPetInfo.status);\n  cy.log('Pet Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "8ba92e56-839a-41ba-b2a0-151fe8785f3e",
              "parentUUID": "290f7b61-83e2-4610-9164-335456ec7c8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet",
              "fullTitle": "Petstore API Testing should delete a pet",
              "timedOut": null,
              "duration": 280,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petIdToDelete = 12345;\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/pet/${petIdToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`Pet with ID ${petIdToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "e25d0012-5e37-45e6-ac58-c06c94cc12c6",
              "parentUUID": "290f7b61-83e2-4610-9164-335456ec7c8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1ebc3c7d-a221-4cf3-8ec7-3b8e7478d511",
            "fa9cbcc6-826d-4120-bf63-7b7d254affea",
            "8ba92e56-839a-41ba-b2a0-151fe8785f3e",
            "e25d0012-5e37-45e6-ac58-c06c94cc12c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1139,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "41e9cf2d-88fa-4adc-ba99-b138016bebba",
          "title": "Petstore Store API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should place a new order",
              "fullTitle": "Petstore Store API Testing should place a new order",
              "timedOut": null,
              "duration": 284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newOrder = {\n  id: 1,\n  petId: 12345,\n  // Assuming pet with ID 12345 exists\n  quantity: 1,\n  shipDate: '2023-12-01T12:00:00.000Z',\n  status: 'placed',\n  complete: true\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/store/order',\n  body: newOrder\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newOrder.id);\n  expect(response.body.petId).to.eq(newOrder.petId);\n  expect(response.body.quantity).to.eq(newOrder.quantity);\n  expect(response.body.status).to.eq(newOrder.status);\n  expect(response.body.complete).to.eq(newOrder.complete);\n  cy.log('New Order Placed:', response.body);\n});",
              "err": {},
              "uuid": "1b50845a-42a8-4c92-9439-acc719047cd9",
              "parentUUID": "41e9cf2d-88fa-4adc-ba99-b138016bebba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve an order by ID",
              "fullTitle": "Petstore Store API Testing should retrieve an order by ID",
              "timedOut": null,
              "duration": 280,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderIdToRetrieve = 1;\ncy.request('GET', `https://petstore.swagger.io/v2/store/order/${orderIdToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(orderIdToRetrieve);\n  cy.log('Retrieved Order:', response.body);\n});",
              "err": {},
              "uuid": "4429dbdc-ba00-4c13-9afe-19003110a8b9",
              "parentUUID": "41e9cf2d-88fa-4adc-ba99-b138016bebba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an order by ID",
              "fullTitle": "Petstore Store API Testing should delete an order by ID",
              "timedOut": null,
              "duration": 284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderIdToDelete = 1;\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/store/order/${orderIdToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`Order with ID ${orderIdToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "69d32ce4-14b3-42e1-84ac-31b8dedd79bb",
              "parentUUID": "41e9cf2d-88fa-4adc-ba99-b138016bebba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b50845a-42a8-4c92-9439-acc719047cd9",
            "4429dbdc-ba00-4c13-9afe-19003110a8b9",
            "69d32ce4-14b3-42e1-84ac-31b8dedd79bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 848,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a4a52e49-7016-4f6f-aed2-dd8310068031",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 282,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 11,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 1\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response:', response);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  // expect(response.body.id).to.eq(newUser.id);\n  // expect(response.body.username).to.eq(newUser.username);\n  // expect(response.body.firstName).to.eq(newUser.firstName);\n  // expect(response.body.lastName).to.eq(newUser.lastName);\n  // expect(response.body.email).to.eq(newUser.email);\n  // expect(response.body.password).to.eq(newUser.password);\n  // expect(response.body.phone).to.eq(newUser.phone);\n  // expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {},
              "uuid": "916f91e0-43df-4235-9652-39363d50aa76",
              "parentUUID": "a4a52e49-7016-4f6f-aed2-dd8310068031",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 279,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "992e8bff-6ff3-4243-8902-81da51762552",
              "parentUUID": "a4a52e49-7016-4f6f-aed2-dd8310068031",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "971e9431-7cf0-4220-82e3-abd5e8048d9c",
              "parentUUID": "a4a52e49-7016-4f6f-aed2-dd8310068031",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 278,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "fffc8088-3b27-447f-9410-2853f8aaa240",
              "parentUUID": "a4a52e49-7016-4f6f-aed2-dd8310068031",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "916f91e0-43df-4235-9652-39363d50aa76",
            "992e8bff-6ff3-4243-8902-81da51762552",
            "971e9431-7cf0-4220-82e3-abd5e8048d9c",
            "fffc8088-3b27-447f-9410-2853f8aaa240"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1120,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "761ca2ff-45ff-46d6-ad07-a72861df8288"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1384,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "e80f9e10-d652-478e-9837-f3f9fd06c5ea",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should logout the user",
          "fullTitle": "should logout the user",
          "timedOut": null,
          "duration": 1469,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Assuming you have a user already logged in, and you have the necessary authentication tokens\n// Perform the login before attempting to logout\n// Your login code goes here...\n// Now, call the custom Cypress command to logout the user\ncy.logoutUser();",
          "err": {},
          "uuid": "37624ed9-e52d-4dae-babd-5bf216ad74f2",
          "parentUUID": "e80f9e10-d652-478e-9837-f3f9fd06c5ea",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "d35e0ca3-e9c0-4e6a-a9a6-38cd57dad173",
          "title": "Petstore API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve a list of pets",
              "fullTitle": "Petstore API Testing should retrieve a list of pets",
              "timedOut": null,
              "duration": 695,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', 'https://petstore.swagger.io/v2/pet/findByStatus?status=available').then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an('array').and.not.be.empty;\n  cy.log('List of Available Pets:', response.body);\n});",
              "err": {},
              "uuid": "69723290-1d83-49ed-af12-ebb665f82f72",
              "parentUUID": "d35e0ca3-e9c0-4e6a-a9a6-38cd57dad173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new pet",
              "fullTitle": "Petstore API Testing should add a new pet",
              "timedOut": null,
              "duration": 321,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newPet = {\n  id: 12345,\n  name: 'CypressPet',\n  category: {\n    id: 1,\n    name: 'Dogs'\n  },\n  photoUrls: ['https://example.com/pet.jpg'],\n  tags: [{\n    id: 1,\n    name: 'tag1'\n  }],\n  status: 'available'\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/pet',\n  body: newPet\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newPet.id);\n  expect(response.body.name).to.eq(newPet.name);\n  cy.log('New Pet Added:', response.body);\n});",
              "err": {},
              "uuid": "f26edf4e-4f59-4aff-a2eb-0ca039c4f357",
              "parentUUID": "d35e0ca3-e9c0-4e6a-a9a6-38cd57dad173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a pet's information",
              "fullTitle": "Petstore API Testing should update a pet's information",
              "timedOut": null,
              "duration": 293,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petIdToUpdate = 12345;\nconst updatedPetInfo = {\n  id: petIdToUpdate,\n  name: 'UpdatedCypressPet',\n  status: 'sold'\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/pet`,\n  body: updatedPetInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(updatedPetInfo.id);\n  expect(response.body.name).to.eq(updatedPetInfo.name);\n  expect(response.body.status).to.eq(updatedPetInfo.status);\n  cy.log('Pet Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "771a30e4-a4b2-4736-bbe5-70072f65a1af",
              "parentUUID": "d35e0ca3-e9c0-4e6a-a9a6-38cd57dad173",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet",
              "fullTitle": "Petstore API Testing should delete a pet",
              "timedOut": null,
              "duration": 291,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const petIdToDelete = 12345;\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/pet/${petIdToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`Pet with ID ${petIdToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "d5f782dc-efe0-43b4-992e-04ea3d33e468",
              "parentUUID": "d35e0ca3-e9c0-4e6a-a9a6-38cd57dad173",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "69723290-1d83-49ed-af12-ebb665f82f72",
            "f26edf4e-4f59-4aff-a2eb-0ca039c4f357",
            "771a30e4-a4b2-4736-bbe5-70072f65a1af",
            "d5f782dc-efe0-43b4-992e-04ea3d33e468"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1600,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6c83a1d7-e4e0-4744-a581-7c9b936ec53a",
          "title": "Petstore Store API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should place a new order",
              "fullTitle": "Petstore Store API Testing should place a new order",
              "timedOut": null,
              "duration": 294,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newOrder = {\n  id: 1,\n  petId: 12345,\n  // Assuming pet with ID 12345 exists\n  quantity: 1,\n  shipDate: '2023-12-01T12:00:00.000Z',\n  status: 'placed',\n  complete: true\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/store/order',\n  body: newOrder\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(newOrder.id);\n  expect(response.body.petId).to.eq(newOrder.petId);\n  expect(response.body.quantity).to.eq(newOrder.quantity);\n  expect(response.body.status).to.eq(newOrder.status);\n  expect(response.body.complete).to.eq(newOrder.complete);\n  cy.log('New Order Placed:', response.body);\n});",
              "err": {},
              "uuid": "4a7e5922-617e-4d6f-b6a7-18f93ce2a7af",
              "parentUUID": "6c83a1d7-e4e0-4744-a581-7c9b936ec53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve an order by ID",
              "fullTitle": "Petstore Store API Testing should retrieve an order by ID",
              "timedOut": null,
              "duration": 293,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderIdToRetrieve = 1;\ncy.request('GET', `https://petstore.swagger.io/v2/store/order/${orderIdToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.id).to.eq(orderIdToRetrieve);\n  cy.log('Retrieved Order:', response.body);\n});",
              "err": {},
              "uuid": "c63600c7-b595-4e84-9895-a49d4fd2f15c",
              "parentUUID": "6c83a1d7-e4e0-4744-a581-7c9b936ec53a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete an order by ID",
              "fullTitle": "Petstore Store API Testing should delete an order by ID",
              "timedOut": null,
              "duration": 487,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const orderIdToDelete = 1;\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/store/order/${orderIdToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`Order with ID ${orderIdToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "50d1eea5-4f78-4367-b5d4-8f2299e2f266",
              "parentUUID": "6c83a1d7-e4e0-4744-a581-7c9b936ec53a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a7e5922-617e-4d6f-b6a7-18f93ce2a7af",
            "c63600c7-b595-4e84-9895-a49d4fd2f15c",
            "50d1eea5-4f78-4367-b5d4-8f2299e2f266"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1074,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e88e62c5-51a0-476d-b713-454ebd3a2e5d",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 418,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 11,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 1\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response:', response);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  expect(response.body).to.eq(newUser.id);\n  // expect(response.body.username).to.eq(newUser.username);\n  // expect(response.body.firstName).to.eq(newUser.firstName);\n  // expect(response.body.lastName).to.eq(newUser.lastName);\n  // expect(response.body.email).to.eq(newUser.email);\n  // expect(response.body.password).to.eq(newUser.password);\n  // expect(response.body.phone).to.eq(newUser.phone);\n  // expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {
                "message": "AssertionError: expected { Object (code, type, ...) } to equal 11",
                "estack": "AssertionError: expected { Object (code, type, ...) } to equal 11\n    at Context.eval (webpack://cypress_test/./cypress/e2e/4-api_testing/pet_store.cy.js:180:31)",
                "diff": "- { code: 200, type: 'unknown', message: '11' }\n+ 11\n"
              },
              "uuid": "b1a0ce6a-2bd2-487e-a3d2-6b248ea4546a",
              "parentUUID": "e88e62c5-51a0-476d-b713-454ebd3a2e5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 290,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "175774d5-34fe-4eea-9eb3-b30185e2289e",
              "parentUUID": "e88e62c5-51a0-476d-b713-454ebd3a2e5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 319,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "8ccdd291-51e8-4304-ba42-faa72b8f1238",
              "parentUUID": "e88e62c5-51a0-476d-b713-454ebd3a2e5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 293,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "bf1ef06a-6191-4828-87f6-969c8e89feba",
              "parentUUID": "e88e62c5-51a0-476d-b713-454ebd3a2e5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "175774d5-34fe-4eea-9eb3-b30185e2289e",
            "8ccdd291-51e8-4304-ba42-faa72b8f1238",
            "bf1ef06a-6191-4828-87f6-969c8e89feba"
          ],
          "failures": [
            "b1a0ce6a-2bd2-487e-a3d2-6b248ea4546a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1320,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "37624ed9-e52d-4dae-babd-5bf216ad74f2"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1469,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "db2f09ff-a23f-4c19-80c7-25fc92ebde43",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should logout the user",
          "fullTitle": "should logout the user",
          "timedOut": null,
          "duration": 1395,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Assuming you have a user already logged in, and you have the necessary authentication tokens\n// Perform the login before attempting to logout\n// Your login code goes here...\n// Now, call the custom Cypress command to logout the user\ncy.logoutUser();",
          "err": {},
          "uuid": "6deeb81a-5cd7-4e7e-820b-3407fe8ececc",
          "parentUUID": "db2f09ff-a23f-4c19-80c7-25fc92ebde43",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "9a297868-fef7-4ed8-b01f-709e9151d1bc",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 390,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 11,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 1\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response:', response);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  expect(response.body).to.eq(newUser.id);\n  // expect(response.body.username).to.eq(newUser.username);\n  // expect(response.body.firstName).to.eq(newUser.firstName);\n  // expect(response.body.lastName).to.eq(newUser.lastName);\n  // expect(response.body.email).to.eq(newUser.email);\n  // expect(response.body.password).to.eq(newUser.password);\n  // expect(response.body.phone).to.eq(newUser.phone);\n  // expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {
                "message": "AssertionError: expected { Object (code, type, ...) } to equal 11",
                "estack": "AssertionError: expected { Object (code, type, ...) } to equal 11\n    at Context.eval (webpack://cypress_test/./cypress/e2e/4-api_testing/pet_store.cy.js:180:31)",
                "diff": "- { code: 200, type: 'unknown', message: '11' }\n+ 11\n"
              },
              "uuid": "0a01722c-3e31-4e7d-8a58-d7ee59a4a30d",
              "parentUUID": "9a297868-fef7-4ed8-b01f-709e9151d1bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 290,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "c8c40521-425a-47c7-88d7-820bab6f3aa4",
              "parentUUID": "9a297868-fef7-4ed8-b01f-709e9151d1bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 290,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "8be717c7-6f3c-4e2c-9bdb-f106b0527553",
              "parentUUID": "9a297868-fef7-4ed8-b01f-709e9151d1bc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 872,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "6c3b1cb0-5857-41c6-871d-aeb14b1ce198",
              "parentUUID": "9a297868-fef7-4ed8-b01f-709e9151d1bc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8c40521-425a-47c7-88d7-820bab6f3aa4",
            "8be717c7-6f3c-4e2c-9bdb-f106b0527553",
            "6c3b1cb0-5857-41c6-871d-aeb14b1ce198"
          ],
          "failures": [
            "0a01722c-3e31-4e7d-8a58-d7ee59a4a30d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1842,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "6deeb81a-5cd7-4e7e-820b-3407fe8ececc"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1395,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "238bf16e-30db-4d4e-bc2c-ebd4b68da5f6",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should logout the user",
          "fullTitle": "should logout the user",
          "timedOut": null,
          "duration": 1456,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Assuming you have a user already logged in, and you have the necessary authentication tokens\n// Perform the login before attempting to logout\n// Your login code goes here...\n// Now, call the custom Cypress command to logout the user\ncy.logoutUser();",
          "err": {},
          "uuid": "41f7a716-8553-444a-85c5-5ea727e49e45",
          "parentUUID": "238bf16e-30db-4d4e-bc2c-ebd4b68da5f6",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "88acd630-4ccf-4d5d-a6ef-e3bea7d29f7d",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 422,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 11,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 1\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response:', response);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  expect(response.body).to.eq(newUser.username);\n  // expect(response.body.username).to.eq(newUser.username);\n  // expect(response.body.firstName).to.eq(newUser.firstName);\n  // expect(response.body.lastName).to.eq(newUser.lastName);\n  // expect(response.body.email).to.eq(newUser.email);\n  // expect(response.body.password).to.eq(newUser.password);\n  // expect(response.body.phone).to.eq(newUser.phone);\n  // expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {
                "message": "AssertionError: expected { Object (code, type, ...) } to equal 'cypressuser'",
                "estack": "AssertionError: expected { Object (code, type, ...) } to equal 'cypressuser'\n    at Context.eval (webpack://cypress_test/./cypress/e2e/4-api_testing/pet_store.cy.js:180:31)",
                "diff": "- { code: 200, type: 'unknown', message: '11' }\n+ 'cypressuser'\n"
              },
              "uuid": "9feb0e82-f660-4f6b-abd5-29b1dabb32c0",
              "parentUUID": "88acd630-4ccf-4d5d-a6ef-e3bea7d29f7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 291,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "f4fbfbe8-c8be-4258-962d-8303bdf6bed5",
              "parentUUID": "88acd630-4ccf-4d5d-a6ef-e3bea7d29f7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 295,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "21dea4a8-28b8-4b1f-9b38-3696fdedc3cc",
              "parentUUID": "88acd630-4ccf-4d5d-a6ef-e3bea7d29f7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 295,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "19f0747b-8dc4-46df-9041-5e0c9876adcc",
              "parentUUID": "88acd630-4ccf-4d5d-a6ef-e3bea7d29f7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4fbfbe8-c8be-4258-962d-8303bdf6bed5",
            "21dea4a8-28b8-4b1f-9b38-3696fdedc3cc",
            "19f0747b-8dc4-46df-9041-5e0c9876adcc"
          ],
          "failures": [
            "9feb0e82-f660-4f6b-abd5-29b1dabb32c0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1303,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "41f7a716-8553-444a-85c5-5ea727e49e45"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1456,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "91a8ee2a-cc08-4888-9394-c3f7ae5640e0",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should logout the user",
          "fullTitle": "should logout the user",
          "timedOut": null,
          "duration": 1408,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Assuming you have a user already logged in, and you have the necessary authentication tokens\n// Perform the login before attempting to logout\n// Your login code goes here...\n// Now, call the custom Cypress command to logout the user\ncy.logoutUser();",
          "err": {},
          "uuid": "55dbd0ea-f7e0-4963-a2e8-a03529fda9bc",
          "parentUUID": "91a8ee2a-cc08-4888-9394-c3f7ae5640e0",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "0211a7a5-e8b0-465b-afeb-a08afe367648",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 446,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 11,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 1\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response:', response);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  // expect(response.body.id).to.eq(newUser.id);\n  expect(response.body.username).to.eq(newUser.username);\n  // expect(response.body.firstName).to.eq(newUser.firstName);\n  // expect(response.body.lastName).to.eq(newUser.lastName);\n  // expect(response.body.email).to.eq(newUser.email);\n  // expect(response.body.password).to.eq(newUser.password);\n  // expect(response.body.phone).to.eq(newUser.phone);\n  // expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'cypressuser'",
                "estack": "AssertionError: expected undefined to equal 'cypressuser'\n    at Context.eval (webpack://cypress_test/./cypress/e2e/4-api_testing/pet_store.cy.js:181:40)",
                "diff": null
              },
              "uuid": "d9b14d4e-ee16-4df8-8520-68f3661ce098",
              "parentUUID": "0211a7a5-e8b0-465b-afeb-a08afe367648",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 294,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "a1a15812-2186-44fe-a61e-7028251b73d7",
              "parentUUID": "0211a7a5-e8b0-465b-afeb-a08afe367648",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 282,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "e2df421e-8111-460e-bbf8-178514dce08a",
              "parentUUID": "0211a7a5-e8b0-465b-afeb-a08afe367648",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 277,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "1b4fae31-a119-4adc-8ced-6c32240ea6d3",
              "parentUUID": "0211a7a5-e8b0-465b-afeb-a08afe367648",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a1a15812-2186-44fe-a61e-7028251b73d7",
            "e2df421e-8111-460e-bbf8-178514dce08a",
            "1b4fae31-a119-4adc-8ced-6c32240ea6d3"
          ],
          "failures": [
            "d9b14d4e-ee16-4df8-8520-68f3661ce098"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1299,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "55dbd0ea-f7e0-4963-a2e8-a03529fda9bc"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1408,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "bd746f88-cd6f-4b8b-b915-ad11c2a3cb1d",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should logout the user",
          "fullTitle": "should logout the user",
          "timedOut": null,
          "duration": 1385,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Assuming you have a user already logged in, and you have the necessary authentication tokens\n// Perform the login before attempting to logout\n// Your login code goes here...\n// Now, call the custom Cypress command to logout the user\ncy.logoutUser();",
          "err": {},
          "uuid": "0e18a23e-2649-4eb3-ac6c-784d42e4dc54",
          "parentUUID": "bd746f88-cd6f-4b8b-b915-ad11c2a3cb1d",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "da931c6c-f542-48ff-9de4-95256feee89e",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 1032,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 11,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 1\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response:', response);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  // expect(response.body.id).to.eq(newUser.id);\n  // expect(response.body.username).to.eq(newUser.username);\n  expect(response.body.firstName).to.eq(newUser.firstName);\n  // expect(response.body.lastName).to.eq(newUser.lastName);\n  // expect(response.body.email).to.eq(newUser.email);\n  // expect(response.body.password).to.eq(newUser.password);\n  // expect(response.body.phone).to.eq(newUser.phone);\n  // expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 'Cypress'",
                "estack": "AssertionError: expected undefined to equal 'Cypress'\n    at Context.eval (webpack://cypress_test/./cypress/e2e/4-api_testing/pet_store.cy.js:182:41)",
                "diff": null
              },
              "uuid": "54177577-e13c-4dd7-a165-6392edb137e7",
              "parentUUID": "da931c6c-f542-48ff-9de4-95256feee89e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 283,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "865fe54a-1564-4072-b44a-0a0056704f89",
              "parentUUID": "da931c6c-f542-48ff-9de4-95256feee89e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 298,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "ab803385-dee2-454c-829b-e1293dc49a2e",
              "parentUUID": "da931c6c-f542-48ff-9de4-95256feee89e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 282,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "8e9f4064-a99b-4a45-9850-d70ec90d09bd",
              "parentUUID": "da931c6c-f542-48ff-9de4-95256feee89e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "865fe54a-1564-4072-b44a-0a0056704f89",
            "ab803385-dee2-454c-829b-e1293dc49a2e",
            "8e9f4064-a99b-4a45-9850-d70ec90d09bd"
          ],
          "failures": [
            "54177577-e13c-4dd7-a165-6392edb137e7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1895,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "0e18a23e-2649-4eb3-ac6c-784d42e4dc54"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1385,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "d6313803-0bf0-4f60-902d-8e24cb7576f6",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should logout the user",
          "fullTitle": "should logout the user",
          "timedOut": null,
          "duration": 1454,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Assuming you have a user already logged in, and you have the necessary authentication tokens\n// Perform the login before attempting to logout\n// Your login code goes here...\n// Now, call the custom Cypress command to logout the user\ncy.logoutUser();",
          "err": {},
          "uuid": "2cee3710-ca9d-4fb7-b318-6aa85d7910e3",
          "parentUUID": "d6313803-0bf0-4f60-902d-8e24cb7576f6",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "66243372-9bd4-4cf3-90bc-08625f5f11cb",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 441,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 11,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 1\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response:', response);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  // expect(response.body.id).to.eq(newUser.id);\n  // expect(response.body.username).to.eq(newUser.username);\n  // expect(response.body.firstName).to.eq(newUser.firstName);\n  // expect(response.body.lastName).to.eq(newUser.lastName);\n  // expect(response.body.email).to.eq(newUser.email);\n  // expect(response.body.password).to.eq(newUser.password);\n  // expect(response.body.phone).to.eq(newUser.phone);\n  expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {
                "message": "AssertionError: expected undefined to equal 1",
                "estack": "AssertionError: expected undefined to equal 1\n    at Context.eval (webpack://cypress_test/./cypress/e2e/4-api_testing/pet_store.cy.js:187:42)",
                "diff": null
              },
              "uuid": "f03900aa-45c7-4bd3-b4e1-f9dfdf773a56",
              "parentUUID": "66243372-9bd4-4cf3-90bc-08625f5f11cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 289,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "d2021afe-7d09-4cdc-b47b-122ed4ea28a8",
              "parentUUID": "66243372-9bd4-4cf3-90bc-08625f5f11cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 287,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "95544ff3-e634-46bf-8a3d-1b190c8d122d",
              "parentUUID": "66243372-9bd4-4cf3-90bc-08625f5f11cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 282,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "fa3c711b-b335-4436-999c-617b1b05fb43",
              "parentUUID": "66243372-9bd4-4cf3-90bc-08625f5f11cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2021afe-7d09-4cdc-b47b-122ed4ea28a8",
            "95544ff3-e634-46bf-8a3d-1b190c8d122d",
            "fa3c711b-b335-4436-999c-617b1b05fb43"
          ],
          "failures": [
            "f03900aa-45c7-4bd3-b4e1-f9dfdf773a56"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1299,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "2cee3710-ca9d-4fb7-b318-6aa85d7910e3"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1454,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "e6658e36-a392-4529-a030-bf0e62e778b4",
      "title": "",
      "fullFile": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "file": "cypress/e2e/4-api_testing/pet_store.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "should logout the user",
          "fullTitle": "should logout the user",
          "timedOut": null,
          "duration": 1783,
          "state": "passed",
          "speed": "fast",
          "pass": true,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "// Assuming you have a user already logged in, and you have the necessary authentication tokens\n// Perform the login before attempting to logout\n// Your login code goes here...\n// Now, call the custom Cypress command to logout the user\ncy.logoutUser();",
          "err": {},
          "uuid": "b551fbea-5019-43dc-a68b-e4e1870b3d58",
          "parentUUID": "e6658e36-a392-4529-a030-bf0e62e778b4",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [
        {
          "uuid": "36c8284a-2dfb-4553-8841-4ec60855a2f0",
          "title": "Petstore User API Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new user",
              "fullTitle": "Petstore User API Testing should create a new user",
              "timedOut": null,
              "duration": 275,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  id: 11,\n  username: 'cypressuser',\n  firstName: 'Cypress',\n  lastName: 'User',\n  email: 'cypressuser@example.com',\n  password: 'cypresspassword',\n  phone: '1234567890',\n  userStatus: 34534\n};\ncy.request({\n  method: 'POST',\n  url: 'https://petstore.swagger.io/v2/user',\n  body: newUser\n}).then(response => {\n  // Log the response to the console for debugging\n  console.log('Response:', response);\n  // Verify the response status is 200 OK\n  expect(response.status).to.eq(200);\n  // Verify that the response body contains the expected user data\n  // expect(response.body.id).to.eq(newUser.id);\n  // expect(response.body.username).to.eq(newUser.username);\n  // expect(response.body.firstName).to.eq(newUser.firstName);\n  // expect(response.body.lastName).to.eq(newUser.lastName);\n  // expect(response.body.email).to.eq(newUser.email);\n  // expect(response.body.password).to.eq(newUser.password);\n  // expect(response.body.phone).to.eq(newUser.phone);\n  // expect(response.body.userStatus).to.eq(newUser.userStatus);\n});",
              "err": {},
              "uuid": "298cf851-f05d-4d0d-8bbc-7f7a4249b031",
              "parentUUID": "36c8284a-2dfb-4553-8841-4ec60855a2f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve a user by username",
              "fullTitle": "Petstore User API Testing should retrieve a user by username",
              "timedOut": null,
              "duration": 503,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToRetrieve = 'cypressuser';\ncy.request('GET', `https://petstore.swagger.io/v2/user/${usernameToRetrieve}`).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.username).to.eq(usernameToRetrieve);\n  cy.log('Retrieved User:', response.body);\n});",
              "err": {},
              "uuid": "112b47c6-0fc8-4d88-9fce-311a15040162",
              "parentUUID": "36c8284a-2dfb-4553-8841-4ec60855a2f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update user information",
              "fullTitle": "Petstore User API Testing should update user information",
              "timedOut": null,
              "duration": 279,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToUpdate = 'cypressuser';\nconst updatedUserInfo = {\n  id: 11,\n  // Use the correct user ID you want to update\n  username: usernameToUpdate,\n  firstName: 'UpdatedCypress',\n  lastName: 'UpdatedUser',\n  email: 'updatedcypressuser@example.com',\n  password: 'updatedcypresspassword',\n  phone: '9876543210',\n  userStatus: 2\n};\ncy.request({\n  method: 'PUT',\n  url: `https://petstore.swagger.io/v2/user/${usernameToUpdate}`,\n  body: updatedUserInfo\n}).then(response => {\n  expect(response.status).to.eq(200);\n  // expect(response.body.id).to.eq(updatedUserInfo.id);\n  // expect(response.body.username).to.eq(updatedUserInfo.username);\n  // expect(response.body.firstName).to.eq(updatedUserInfo.firstName);\n  // expect(response.body.lastName).to.eq(updatedUserInfo.lastName);\n  // expect(response.body.email).to.eq(updatedUserInfo.email);\n  // expect(response.body.phone).to.eq(updatedUserInfo.phone);\n  // expect(response.body.userStatus).to.eq(updatedUserInfo.userStatus);\n  cy.log('User Information Updated:', response.body);\n});",
              "err": {},
              "uuid": "a4dfd2e4-7391-455d-83df-f9073806aebe",
              "parentUUID": "36c8284a-2dfb-4553-8841-4ec60855a2f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user by username",
              "fullTitle": "Petstore User API Testing should delete a user by username",
              "timedOut": null,
              "duration": 278,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usernameToDelete = 'cypressuser';\ncy.request({\n  method: 'DELETE',\n  url: `https://petstore.swagger.io/v2/user/${usernameToDelete}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(`User with username ${usernameToDelete} Deleted`);\n});",
              "err": {},
              "uuid": "f3ba2c97-1a46-4370-98a5-3715afba4f7d",
              "parentUUID": "36c8284a-2dfb-4553-8841-4ec60855a2f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "298cf851-f05d-4d0d-8bbc-7f7a4249b031",
            "112b47c6-0fc8-4d88-9fce-311a15040162",
            "a4dfd2e4-7391-455d-83df-f9073806aebe",
            "f3ba2c97-1a46-4370-98a5-3715afba4f7d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1335,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [
        "b551fbea-5019-43dc-a68b-e4e1870b3d58"
      ],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 1783,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "charts": true,
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/reports/mocha"
      },
      "version": "6.2.0"
    }
  }
}